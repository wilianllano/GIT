/*
entidad ********************************************************************************
	public class Agenda{
	private int idagenda;
	private String apellidos;
	private String nombres;
	private String direccion;
	private int edad;
	private String fechaNacimiento;

	public Agenda() {

	}

	public Agenda(String apellidos, String nombre, String direccion, int edad, String fechaNacimiento) {

		this.apellidos = apellidos;
		this.nombres = nombre;
		this.direccion = direccion;
		this.edad = edad;
		this.fechaNacimiento = fechaNacimiento;
	}
	
	/////generar getters and setters

}

modelo ********************************************************************************
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.text.ParseException;
	import java.text.SimpleDateFormat;
	import java.util.ArrayList;
	import java.util.List;

	import javax.swing.JOptionPane;

	//import com.mysql.jdbc.JDBC4PreparedStatement;

	import entidad.Agenda;
	import util.MiConexion;	
public class ModelAgenda (//modelo mysql donde se genera la inserccion a la BD mysql)
	public class ModelAgenda {

	public List<Agenda> ListAgenda(){ 
	List<Agenda> datos = new ArrayList<Agenda>();
	Connection con = null;
	PreparedStatement pstm=null;
	ResultSet rs= null;
	
	try {
		con = new MiConexion().getConnection();
		String sql = "select * from tb_agenda";
		pstm=con.prepareStatement(sql);
		rs=pstm.executeQuery();
		
		Agenda a= null;
		
		while (rs.next()) {
			a= new Agenda();
			a.setIdagenda(rs.getInt("idagenda"));
			a.setApellidos(rs.getString("apellidos"));
			a.setNombres(rs.getString("nombres"));
			a.setDireccion(rs.getString("direccion"));
			a.setEdad(rs.getInt("edad"));
			a.setFechaNacimiento(rs.getDate("fechanacimiento").toString());
		}
				
	} catch (Exception e) {
		// TODO: handle exception
		e.printStackTrace();
		
	}finally {
		try {
			pstm.close();
			con.close();
			rs.close();
			
			
		} catch (Exception e2) {
			// TODO: handle exception
			e2.printStackTrace();
		}
	}
	
	return datos;
	
	}
	public int insertarAgenda(Agenda obj) throws ParseException{
		int insertados = -1;
		String fecha = obj.getFechaNacimiento();
		
		java.util.Date fnac= new SimpleDateFormat("yyyy-MM-dd").parse(fecha);
		java.sql.Date sqlDate= new java.sql.Date(fnac.getTime());
		
		Connection con = null;
		PreparedStatement pstm = null;
		
		try {
			con=new MiConexion().getConnection();
			String sql ="insert into tb_agenda values(null,?,?,?,?,?)";
			pstm=con.prepareStatement(sql);
			
			pstm.setString(1, obj.getApellidos());
			pstm.setString(2, obj.getNombres());
			pstm.setString(3, obj.getDireccion());
			pstm.setInt(4, obj.getEdad());
			pstm.setDate(5,  sqlDate);
			
			insertados = pstm.executeUpdate();
			JOptionPane.showMessageDialog(null, "Registros insertados: "+insertados);
				
		} catch (SQLException e) {
			// TODO: handle exception
		}finally {
			try {
				pstm.close();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return insertados;
	}
	
}	
	


presentacion ********************************************************************************
	public class Principal JFrame implements ActionListener (// donde se crea el programa)	
	
	import com.toedter.calendar.JCalendar;
	import entidad.Agenda;
	import modelo.ModelAgenda;

	import javax.swing.JButton;
	import java.awt.Font;
	import java.awt.event.ActionListener;
	import java.text.DateFormat;
	import java.text.SimpleDateFormat;
	import java.awt.event.ActionEvent;
	import com.toedter.calendar.JDateChooser;
	
	////instanciando el objeto de inserccion
	ModelAgenda model = new ModelAgenda(); //para trabajar la insercion del registro  instancias --global
	private JDateChooser dateChooser;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					
					UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel"); ****importante jtattoo skin
					
					
					Principal frame = new Principal();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	---------------------------------------------------------------------------
	protected void actionPerformedBtnRegistrar(ActionEvent e) {   /// boton registrar los campos a la BD
		
		DateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
		
		String apellidos =txtApellidos.getText().trim();// para evitar espacios en blanco al final
		String nombres = txtNombres.getText().trim();
		String direccion = txtDireccion.getText().trim();
		int edad = Integer.parseInt(txtEdad.getText().trim());
		String fecha = formato.format(dateChooser.getDate());
		
		Agenda a = new Agenda(apellidos, nombres, direccion, edad, fecha);
		
		try {
			model.insertarAgenda(a);// inserta los datos del objeto a
		} catch (Exception e2) {
			// TODO: handle exception
			e2.printStackTrace();
		}
		
		
		
	}
	protected void actionPerformedBtnSalir(ActionEvent e) { ///btn salir
		
		System.exit(0);
	}
}

	


util ********************************************************************************
	public class MiConexion (//la clase de conexion a mysql)	
	package util;
	/// importantdo drivers 
	import java.sql.Connection;
	import java.sql.DriverManager;
	import java.sql.SQLException;
	
	public class MiConexion {
	
	private final String URL="jdbc:mysql://localhost:3306/bd_agenda";
	private final String USER="root";
	private final String PASS="admin123";
	
	public MiConexion(){ }
	
	static{
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public Connection getConnection(){
		Connection conn=null;
		try {
			conn=DriverManager.getConnection(URL,USER,PASS);
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
				
		return conn;
	}

}


-------regex ----- validaciones-------

package validacion
	
	///public class ValidacionEntrada ///// clase de validacion

	public class ValidacionEntrada {

	public static boolean validarPrimerNombre(String primerNombre){
		return primerNombre.matches("[A-Z][az-aA-Z]*");
	}
	
	public static boolean validarApellido(String apellidoPaterno){
		return apellidoPaterno.matches("[a-zA-Z]+([ '-][a-zA-Z]+)*");
	}
	public static boolean validarDireccion(String direccion){
		return direccion.matches("([a-zA-Z]+[a-zA-Z]+\\s[a-zA-Z]+)\\s+([a-zA-Z]\\d+|\\d+)");
	}
	public static boolean validarCiudad(String ciudad){
		return ciudad.matches("([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+)");
	}
	public static boolean validarCP(String cp){
		return cp.matches("\\s{5}");
	}
	public static boolean validarTelefono(String telefono){
		return telefono.matches("[1-9]\\d{2}-[1-9]\\d{5}");
	}
	
	public static boolean validarCorreo(String correo){
		
		return correo.matches("@[a-Z]");
	}
}



--------------------------------------------------------------------------
	class Prueba validacion ////// jframe donde se hace la validacion

	-----------------------------
	protected void actionPerformedBtnProcesar(ActionEvent e) {
		
		if (!ValidacionEntrada.validarPrimerNombre(txtNombre.getText()))
			txtS.append("Primer nombre no valido \n");
		else if (!ValidacionEntrada.validarApellido(txtApellido.getText()))
			txtS.append("Apellido no valido \n");
		else if (!ValidacionEntrada.validarDireccion(txtDireccion.getText()))
			txtS.append("Direccion no valida \n");
		else if (!ValidacionEntrada.validarCP(txtCodigo.getText()))
			txtS.append("codigo postal no valido \n");
		else if (!ValidacionEntrada.validarTelefono(txtTelefono.getText()))
			txtS.append("Telefono no valido \n");
		//else if(!ValidacionEntrada.validarCorreo(txtCorreo.txt))
		else
			txtS.append("la entrada es valida.Gracias");
		}

*/